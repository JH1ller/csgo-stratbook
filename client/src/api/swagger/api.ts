/* tslint:disable */
/* eslint-disable */
/**
 * csgo-stratbook api
 * Stratbook REST API
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateStrategyDto
 */
export interface CreateStrategyDto {
    /**
     * 
     * @type {string}
     * @memberof CreateStrategyDto
     */
    map: CreateStrategyDtoMapEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateStrategyDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateStrategyDto
     */
    type?: CreateStrategyDtoTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateStrategyDto
     */
    side: CreateStrategyDtoSideEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CreateStrategyDto
     */
    active: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateStrategyDto
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateStrategyDto
     */
    videoLink?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateStrategyDtoMapEnum {
    Dust2 = 'DUST_2',
    Mirage = 'MIRAGE',
    Overpass = 'OVERPASS',
    Nuke = 'NUKE',
    Vertigo = 'VERTIGO',
    Inferno = 'INFERNO',
    Train = 'TRAIN'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateStrategyDtoTypeEnum {
    Pistol = 'PISTOL',
    Force = 'FORCE',
    Buyround = 'BUYROUND'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateStrategyDtoSideEnum {
    Ct = 'CT',
    T = 'T'
}

/**
 * 
 * @export
 * @interface DeleteUserDto
 */
export interface DeleteUserDto {
    /**
     * Safety measure to prevent accidental deletion.
     * @type {string}
     * @memberof DeleteUserDto
     */
    userName: string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordDto
 */
export interface ForgotPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    captchaResponse: string;
}
/**
 * 
 * @export
 * @interface LocalSignInDto
 */
export interface LocalSignInDto {
    /**
     * 
     * @type {string}
     * @memberof LocalSignInDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LocalSignInDto
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ProfileUpdateDto
 */
export interface ProfileUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDto
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDto
     */
    password: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileUpdateDto
     */
    completedTutorial: boolean;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LocalSignInDto} localSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (localSignInDto: LocalSignInDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'localSignInDto' is not null or undefined
            assertParamExists('authControllerLogin', 'localSignInDto', localSignInDto)
            const localVarPath = `/api/auth/local/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(localSignInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LocalSignInDto} localSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(localSignInDto: LocalSignInDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(localSignInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LocalSignInDto} localSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(localSignInDto: LocalSignInDto, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogin(localSignInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {LocalSignInDto} localSignInDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(localSignInDto: LocalSignInDto, options?: any) {
        return AuthApiFp(this.configuration).authControllerLogin(localSignInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogout(options?: any) {
        return AuthApiFp(this.configuration).authControllerLogout(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StrategiesApi - axios parameter creator
 * @export
 */
export const StrategiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStrategyDto} createStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerAddStrategy: async (createStrategyDto: CreateStrategyDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createStrategyDto' is not null or undefined
            assertParamExists('strategiesControllerAddStrategy', 'createStrategyDto', createStrategyDto)
            const localVarPath = `/api/strategies/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStrategyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerDeleteStrategy: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('strategiesControllerDeleteStrategy', 'id', id)
            const localVarPath = `/api/strategies/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerGetStrategy: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/strategies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StrategiesApi - functional programming interface
 * @export
 */
export const StrategiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StrategiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateStrategyDto} createStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerAddStrategy(createStrategyDto: CreateStrategyDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerAddStrategy(createStrategyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerDeleteStrategy(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerDeleteStrategy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerGetStrategy(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerGetStrategy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StrategiesApi - factory interface
 * @export
 */
export const StrategiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StrategiesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateStrategyDto} createStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerAddStrategy(createStrategyDto: CreateStrategyDto, options?: any): AxiosPromise<void> {
            return localVarFp.strategiesControllerAddStrategy(createStrategyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerDeleteStrategy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.strategiesControllerDeleteStrategy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerGetStrategy(options?: any): AxiosPromise<void> {
            return localVarFp.strategiesControllerGetStrategy(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StrategiesApi - object-oriented interface
 * @export
 * @class StrategiesApi
 * @extends {BaseAPI}
 */
export class StrategiesApi extends BaseAPI {
    /**
     * 
     * @param {CreateStrategyDto} createStrategyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerAddStrategy(createStrategyDto: CreateStrategyDto, options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerAddStrategy(createStrategyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerDeleteStrategy(id: string, options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerDeleteStrategy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerGetStrategy(options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerGetStrategy(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} name 
         * @param {string} website 
         * @param {string} serverIp 
         * @param {string} serverPassword 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerCreateTeam: async (name: string, website: string, serverIp: string, serverPassword: string, avatar?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('teamsControllerCreateTeam', 'name', name)
            // verify required parameter 'website' is not null or undefined
            assertParamExists('teamsControllerCreateTeam', 'website', website)
            // verify required parameter 'serverIp' is not null or undefined
            assertParamExists('teamsControllerCreateTeam', 'serverIp', serverIp)
            // verify required parameter 'serverPassword' is not null or undefined
            assertParamExists('teamsControllerCreateTeam', 'serverPassword', serverPassword)
            const localVarPath = `/api/teams/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (website !== undefined) { 
                localVarFormParams.append('website', website as any);
            }
    
            if (serverIp !== undefined) { 
                localVarFormParams.append('serverIp', serverIp as any);
            }
    
            if (serverPassword !== undefined) { 
                localVarFormParams.append('serverPassword', serverPassword as any);
            }
    
            if (avatar !== undefined) { 
                localVarFormParams.append('avatar', avatar as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerGetPlayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerLeaveTeam: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams/leave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {string} website 
         * @param {string} serverIp 
         * @param {string} serverPassword 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsControllerCreateTeam(name: string, website: string, serverIp: string, serverPassword: string, avatar?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsControllerCreateTeam(name, website, serverIp, serverPassword, avatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsControllerGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsControllerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsControllerGetPlayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsControllerGetPlayers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsControllerLeaveTeam(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsControllerLeaveTeam(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {string} website 
         * @param {string} serverIp 
         * @param {string} serverPassword 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerCreateTeam(name: string, website: string, serverIp: string, serverPassword: string, avatar?: any, options?: any): AxiosPromise<void> {
            return localVarFp.teamsControllerCreateTeam(name, website, serverIp, serverPassword, avatar, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerGet(options?: any): AxiosPromise<void> {
            return localVarFp.teamsControllerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerGetPlayers(options?: any): AxiosPromise<void> {
            return localVarFp.teamsControllerGetPlayers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerLeaveTeam(options?: any): AxiosPromise<void> {
            return localVarFp.teamsControllerLeaveTeam(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * 
     * @param {string} name 
     * @param {string} website 
     * @param {string} serverIp 
     * @param {string} serverPassword 
     * @param {any} [avatar] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsControllerCreateTeam(name: string, website: string, serverIp: string, serverPassword: string, avatar?: any, options?: any) {
        return TeamsApiFp(this.configuration).teamsControllerCreateTeam(name, website, serverIp, serverPassword, avatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsControllerGet(options?: any) {
        return TeamsApiFp(this.configuration).teamsControllerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsControllerGetPlayers(options?: any) {
        return TeamsApiFp(this.configuration).teamsControllerGetPlayers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsControllerLeaveTeam(options?: any) {
        return TeamsApiFp(this.configuration).teamsControllerLeaveTeam(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteUserDto} deleteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser: async (deleteUserDto: DeleteUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUserDto' is not null or undefined
            assertParamExists('usersControllerDeleteUser', 'deleteUserDto', deleteUserDto)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerForgotPassword: async (forgotPasswordDto: ForgotPasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDto' is not null or undefined
            assertParamExists('usersControllerForgotPassword', 'forgotPasswordDto', forgotPasswordDto)
            const localVarPath = `/api/users/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {string} email 
         * @param {string} password 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegisterUser: async (userName: string, email: string, password: string, avatar?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('usersControllerRegisterUser', 'userName', userName)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('usersControllerRegisterUser', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('usersControllerRegisterUser', 'password', password)
            const localVarPath = `/api/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userName !== undefined) { 
                localVarFormParams.append('userName', userName as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }
    
            if (avatar !== undefined) { 
                localVarFormParams.append('avatar', avatar as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProfileUpdateDto} profileUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser: async (profileUpdateDto: ProfileUpdateDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileUpdateDto' is not null or undefined
            assertParamExists('usersControllerUpdateUser', 'profileUpdateDto', profileUpdateDto)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserConfirmation: async (token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('usersControllerUserConfirmation', 'token', token)
            const localVarPath = `/api/users/confirmation/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteUserDto} deleteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerDeleteUser(deleteUserDto: DeleteUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerDeleteUser(deleteUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerForgotPassword(forgotPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userName 
         * @param {string} email 
         * @param {string} password 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRegisterUser(userName: string, email: string, password: string, avatar?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRegisterUser(userName, email, password, avatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProfileUpdateDto} profileUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdateUser(profileUpdateDto: ProfileUpdateDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdateUser(profileUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUserConfirmation(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUserConfirmation(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {DeleteUserDto} deleteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser(deleteUserDto: DeleteUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerDeleteUser(deleteUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerForgotPassword(forgotPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUser(options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerGetUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userName 
         * @param {string} email 
         * @param {string} password 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegisterUser(userName: string, email: string, password: string, avatar?: any, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerRegisterUser(userName, email, password, avatar, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProfileUpdateDto} profileUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser(profileUpdateDto: ProfileUpdateDto, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerUpdateUser(profileUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserConfirmation(token: string, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerUserConfirmation(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {DeleteUserDto} deleteUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerDeleteUser(deleteUserDto: DeleteUserDto, options?: any) {
        return UsersApiFp(this.configuration).usersControllerDeleteUser(deleteUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ForgotPasswordDto} forgotPasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any) {
        return UsersApiFp(this.configuration).usersControllerForgotPassword(forgotPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUser(options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} userName 
     * @param {string} email 
     * @param {string} password 
     * @param {any} [avatar] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRegisterUser(userName: string, email: string, password: string, avatar?: any, options?: any) {
        return UsersApiFp(this.configuration).usersControllerRegisterUser(userName, email, password, avatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProfileUpdateDto} profileUpdateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdateUser(profileUpdateDto: ProfileUpdateDto, options?: any) {
        return UsersApiFp(this.configuration).usersControllerUpdateUser(profileUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUserConfirmation(token: string, options?: any) {
        return UsersApiFp(this.configuration).usersControllerUserConfirmation(token, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilitiesApi - axios parameter creator
 * @export
 */
export const UtilitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} map 
         * @param {string} name 
         * @param {string} side 
         * @param {string} mouseButton 
         * @param {boolean} crouch 
         * @param {string} movement 
         * @param {boolean} jump 
         * @param {string} type 
         * @param {Array<any>} images 
         * @param {string} [description] 
         * @param {string} [videoLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerAddUtility: async (map: string, name: string, side: string, mouseButton: string, crouch: boolean, movement: string, jump: boolean, type: string, images: Array<any>, description?: string, videoLink?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'map' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'map', map)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'name', name)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'side', side)
            // verify required parameter 'mouseButton' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'mouseButton', mouseButton)
            // verify required parameter 'crouch' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'crouch', crouch)
            // verify required parameter 'movement' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'movement', movement)
            // verify required parameter 'jump' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'jump', jump)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'type', type)
            // verify required parameter 'images' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'images', images)
            const localVarPath = `/api/utilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (map !== undefined) { 
                localVarFormParams.append('map', map as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (videoLink !== undefined) { 
                localVarFormParams.append('videoLink', videoLink as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.append('side', side as any);
            }
    
            if (mouseButton !== undefined) { 
                localVarFormParams.append('mouseButton', mouseButton as any);
            }
    
            if (crouch !== undefined) { 
                localVarFormParams.append('crouch', crouch as any);
            }
    
            if (movement !== undefined) { 
                localVarFormParams.append('movement', movement as any);
            }
    
            if (jump !== undefined) { 
                localVarFormParams.append('jump', jump as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
                if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('images', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilitiesApi - functional programming interface
 * @export
 */
export const UtilitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} map 
         * @param {string} name 
         * @param {string} side 
         * @param {string} mouseButton 
         * @param {boolean} crouch 
         * @param {string} movement 
         * @param {boolean} jump 
         * @param {string} type 
         * @param {Array<any>} images 
         * @param {string} [description] 
         * @param {string} [videoLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerAddUtility(map: string, name: string, side: string, mouseButton: string, crouch: boolean, movement: string, jump: boolean, type: string, images: Array<any>, description?: string, videoLink?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerAddUtility(map, name, side, mouseButton, crouch, movement, jump, type, images, description, videoLink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilitiesApi - factory interface
 * @export
 */
export const UtilitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilitiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} map 
         * @param {string} name 
         * @param {string} side 
         * @param {string} mouseButton 
         * @param {boolean} crouch 
         * @param {string} movement 
         * @param {boolean} jump 
         * @param {string} type 
         * @param {Array<any>} images 
         * @param {string} [description] 
         * @param {string} [videoLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerAddUtility(map: string, name: string, side: string, mouseButton: string, crouch: boolean, movement: string, jump: boolean, type: string, images: Array<any>, description?: string, videoLink?: string, options?: any): AxiosPromise<void> {
            return localVarFp.utilitiesControllerAddUtility(map, name, side, mouseButton, crouch, movement, jump, type, images, description, videoLink, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UtilitiesApi - object-oriented interface
 * @export
 * @class UtilitiesApi
 * @extends {BaseAPI}
 */
export class UtilitiesApi extends BaseAPI {
    /**
     * 
     * @param {string} map 
     * @param {string} name 
     * @param {string} side 
     * @param {string} mouseButton 
     * @param {boolean} crouch 
     * @param {string} movement 
     * @param {boolean} jump 
     * @param {string} type 
     * @param {Array<any>} images 
     * @param {string} [description] 
     * @param {string} [videoLink] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerAddUtility(map: string, name: string, side: string, mouseButton: string, crouch: boolean, movement: string, jump: boolean, type: string, images: Array<any>, description?: string, videoLink?: string, options?: any) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerAddUtility(map, name, side, mouseButton, crouch, movement, jump, type, images, description, videoLink, options).then((request) => request(this.axios, this.basePath));
    }
}



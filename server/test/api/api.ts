/* tslint:disable */
/* eslint-disable */
/**
 * csgo-stratbook api
 * Stratbook REST API
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface DeleteTeamDto
 */
export interface DeleteTeamDto {
    /**
     * 
     * @type {string}
     * @memberof DeleteTeamDto
     */
    teamName: string;
}
/**
 * 
 * @export
 * @interface DeleteUserDto
 */
export interface DeleteUserDto {
    /**
     * Safety measure to prevent accidental deletion.
     * @type {string}
     * @memberof DeleteUserDto
     */
    userName: string;
}
/**
 * 
 * @export
 * @interface DeleteUtilityDto
 */
export interface DeleteUtilityDto {
    /**
     * utility sub-document Id
     * @type {string}
     * @memberof DeleteUtilityDto
     */
    id: string;
}
/**
 * 
 * @export
 * @interface ForgotPasswordDto
 */
export interface ForgotPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ForgotPasswordDto
     */
    captchaResponse: string;
}
/**
 * 
 * @export
 * @interface GetTeamResponse
 */
export interface GetTeamResponse {
    /**
     * 
     * @type {string}
     * @memberof GetTeamResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GetTeamResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GetTeamResponse
     */
    website: string;
    /**
     * 
     * @type {TeamServerConnection}
     * @memberof GetTeamResponse
     */
    server: TeamServerConnection;
    /**
     * 
     * @type {string}
     * @memberof GetTeamResponse
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof GetTeamResponse
     */
    avatar: string;
    /**
     * 
     * @type {string}
     * @memberof GetTeamResponse
     */
    manager: string;
}
/**
 * 
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     * 
     * @type {string}
     * @memberof GetUserResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserResponse
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof GetUserResponse
     */
    avatar: string;
    /**
     * 
     * @type {GetTeamResponse}
     * @memberof GetUserResponse
     */
    team: GetTeamResponse;
    /**
     * 
     * @type {boolean}
     * @memberof GetUserResponse
     */
    completedTutorial: boolean;
}
/**
 * 
 * @export
 * @interface GetUtilityCratedByResponse
 */
export interface GetUtilityCratedByResponse {
    /**
     * 
     * @type {string}
     * @memberof GetUtilityCratedByResponse
     */
    userName: string;
}
/**
 * 
 * @export
 * @interface GetUtilityResponse
 */
export interface GetUtilityResponse {
    /**
     * 
     * @type {string}
     * @memberof GetUtilityResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GetUtilityResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GetUtilityResponse
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof GetUtilityResponse
     */
    playerSide: PlayerSide;
    /**
     * 
     * @type {string}
     * @memberof GetUtilityResponse
     */
    type: Type;
    /**
     * 
     * @type {string}
     * @memberof GetUtilityResponse
     */
    mouseButton: MouseButton;
    /**
     * 
     * @type {boolean}
     * @memberof GetUtilityResponse
     */
    crouch: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GetUtilityResponse
     */
    jump: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetUtilityResponse
     */
    movement: Movement;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetUtilityResponse
     */
    images: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetUtilityResponse
     */
    videoLink: string;
    /**
     * 
     * @type {GetUtilityCratedByResponse}
     * @memberof GetUtilityResponse
     */
    createdBy: GetUtilityCratedByResponse;
    /**
     * 
     * @type {string}
     * @memberof GetUtilityResponse
     */
    createdAt: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PlayerSide {
    Ct = 'CT',
    T = 'T'
}
/**
    * @export
    * @enum {string}
    */
export enum Type {
    Flash = 'FLASH',
    Grenade = 'GRENADE',
    Smoke = 'SMOKE',
    Molotov = 'MOLOTOV'
}
/**
    * @export
    * @enum {string}
    */
export enum MouseButton {
    Left = 'LEFT',
    Right = 'RIGHT',
    Leftright = 'LEFTRIGHT'
}
/**
    * @export
    * @enum {string}
    */
export enum Movement {
    Still = 'STILL',
    Walk = 'WALK',
    Run = 'RUN'
}

/**
 * 
 * @export
 * @interface LocalSignInDto
 */
export interface LocalSignInDto {
    /**
     * 
     * @type {string}
     * @memberof LocalSignInDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LocalSignInDto
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ProfileUpdateDto
 */
export interface ProfileUpdateDto {
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDto
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ProfileUpdateDto
     */
    password: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProfileUpdateDto
     */
    completedTutorial: boolean;
    /**
     * true if user name should be replaced in strategies
     * @type {boolean}
     * @memberof ProfileUpdateDto
     */
    updateStrategies: boolean;
}
/**
 * 
 * @export
 * @interface RegisterUserResponse
 */
export interface RegisterUserResponse {
    /**
     * 
     * @type {string}
     * @memberof RegisterUserResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterUserResponse
     */
    email: string;
}
/**
 * 
 * @export
 * @interface ResetPasswordDto
 */
export interface ResetPasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof ResetPasswordDto
     */
    captchaResponse: string;
}
/**
 * 
 * @export
 * @interface TeamServerConnection
 */
export interface TeamServerConnection {
    /**
     * 
     * @type {string}
     * @memberof TeamServerConnection
     */
    ip: string;
    /**
     * 
     * @type {string}
     * @memberof TeamServerConnection
     */
    password: string;
}
/**
 * 
 * @export
 * @interface UpdateUtilityPositionDto
 */
export interface UpdateUtilityPositionDto {
    /**
     * Utility id
     * @type {string}
     * @memberof UpdateUtilityPositionDto
     */
    id: string;
    /**
     * Old position where the utility was located
     * @type {number}
     * @memberof UpdateUtilityPositionDto
     */
    oldPosition: number;
    /**
     * New position where the utility should be placed at
     * @type {number}
     * @memberof UpdateUtilityPositionDto
     */
    newPosition: number;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LocalSignInDto} localSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (localSignInDto: LocalSignInDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'localSignInDto' is not null or undefined
            assertParamExists('authControllerLogin', 'localSignInDto', localSignInDto)
            const localVarPath = `/api/auth/local/signin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(localSignInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LocalSignInDto} localSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(localSignInDto: LocalSignInDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(localSignInDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {LocalSignInDto} localSignInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(localSignInDto: LocalSignInDto, options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogin(localSignInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any): AxiosPromise<void> {
            return localVarFp.authControllerLogout(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authControllerLogin operation in AuthApi.
 * @export
 * @interface AuthApiAuthControllerLoginRequest
 */
export interface AuthApiAuthControllerLoginRequest {
    /**
     * 
     * @type {LocalSignInDto}
     * @memberof AuthApiAuthControllerLogin
     */
    readonly localSignInDto: LocalSignInDto
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {AuthApiAuthControllerLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(requestParameters: AuthApiAuthControllerLoginRequest, options?: any) {
        return AuthApiFp(this.configuration).authControllerLogin(requestParameters.localSignInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogout(options?: any) {
        return AuthApiFp(this.configuration).authControllerLogout(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StrategiesApi - axios parameter creator
 * @export
 */
export const StrategiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} body Adds a new strategy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerAddStrategy: async (body: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('strategiesControllerAddStrategy', 'body', body)
            const localVarPath = `/api/strategies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerDeleteStrategy: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('strategiesControllerDeleteStrategy', 'id', id)
            const localVarPath = `/api/strategies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerGetStrategy: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/strategies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StrategiesApi - functional programming interface
 * @export
 */
export const StrategiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StrategiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} body Adds a new strategy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerAddStrategy(body: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerAddStrategy(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerDeleteStrategy(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerDeleteStrategy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerGetStrategy(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerGetStrategy(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StrategiesApi - factory interface
 * @export
 */
export const StrategiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StrategiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} body Adds a new strategy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerAddStrategy(body: string, options?: any): AxiosPromise<void> {
            return localVarFp.strategiesControllerAddStrategy(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerDeleteStrategy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.strategiesControllerDeleteStrategy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerGetStrategy(options?: any): AxiosPromise<void> {
            return localVarFp.strategiesControllerGetStrategy(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for strategiesControllerAddStrategy operation in StrategiesApi.
 * @export
 * @interface StrategiesApiStrategiesControllerAddStrategyRequest
 */
export interface StrategiesApiStrategiesControllerAddStrategyRequest {
    /**
     * Adds a new strategy
     * @type {string}
     * @memberof StrategiesApiStrategiesControllerAddStrategy
     */
    readonly body: string
}

/**
 * Request parameters for strategiesControllerDeleteStrategy operation in StrategiesApi.
 * @export
 * @interface StrategiesApiStrategiesControllerDeleteStrategyRequest
 */
export interface StrategiesApiStrategiesControllerDeleteStrategyRequest {
    /**
     * 
     * @type {string}
     * @memberof StrategiesApiStrategiesControllerDeleteStrategy
     */
    readonly id: string
}

/**
 * StrategiesApi - object-oriented interface
 * @export
 * @class StrategiesApi
 * @extends {BaseAPI}
 */
export class StrategiesApi extends BaseAPI {
    /**
     * 
     * @param {StrategiesApiStrategiesControllerAddStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerAddStrategy(requestParameters: StrategiesApiStrategiesControllerAddStrategyRequest, options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerAddStrategy(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategiesApiStrategiesControllerDeleteStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerDeleteStrategy(requestParameters: StrategiesApiStrategiesControllerDeleteStrategyRequest, options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerDeleteStrategy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerGetStrategy(options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerGetStrategy(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} name 
         * @param {string} website 
         * @param {string} serverIp 
         * @param {string} serverPassword 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerCreateTeam: async (name: string, website: string, serverIp: string, serverPassword: string, avatar?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('teamsControllerCreateTeam', 'name', name)
            // verify required parameter 'website' is not null or undefined
            assertParamExists('teamsControllerCreateTeam', 'website', website)
            // verify required parameter 'serverIp' is not null or undefined
            assertParamExists('teamsControllerCreateTeam', 'serverIp', serverIp)
            // verify required parameter 'serverPassword' is not null or undefined
            assertParamExists('teamsControllerCreateTeam', 'serverPassword', serverPassword)
            const localVarPath = `/api/teams/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (website !== undefined) { 
                localVarFormParams.append('website', website as any);
            }
    
            if (serverIp !== undefined) { 
                localVarFormParams.append('serverIp', serverIp as any);
            }
    
            if (serverPassword !== undefined) { 
                localVarFormParams.append('serverPassword', serverPassword as any);
            }
    
            if (avatar !== undefined) { 
                localVarFormParams.append('avatar', avatar as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteTeamDto} deleteTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerDeleteTeam: async (deleteTeamDto: DeleteTeamDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteTeamDto' is not null or undefined
            assertParamExists('teamsControllerDeleteTeam', 'deleteTeamDto', deleteTeamDto)
            const localVarPath = `/api/teams/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTeamDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerGetPlayers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerLeaveTeam: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/teams/leave`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {string} website 
         * @param {string} serverIp 
         * @param {string} serverPassword 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsControllerCreateTeam(name: string, website: string, serverIp: string, serverPassword: string, avatar?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsControllerCreateTeam(name, website, serverIp, serverPassword, avatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteTeamDto} deleteTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsControllerDeleteTeam(deleteTeamDto: DeleteTeamDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsControllerDeleteTeam(deleteTeamDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsControllerGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsControllerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsControllerGetPlayers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsControllerGetPlayers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async teamsControllerLeaveTeam(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.teamsControllerLeaveTeam(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {string} website 
         * @param {string} serverIp 
         * @param {string} serverPassword 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerCreateTeam(name: string, website: string, serverIp: string, serverPassword: string, avatar?: any, options?: any): AxiosPromise<void> {
            return localVarFp.teamsControllerCreateTeam(name, website, serverIp, serverPassword, avatar, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteTeamDto} deleteTeamDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerDeleteTeam(deleteTeamDto: DeleteTeamDto, options?: any): AxiosPromise<void> {
            return localVarFp.teamsControllerDeleteTeam(deleteTeamDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerGet(options?: any): AxiosPromise<void> {
            return localVarFp.teamsControllerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerGetPlayers(options?: any): AxiosPromise<void> {
            return localVarFp.teamsControllerGetPlayers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsControllerLeaveTeam(options?: any): AxiosPromise<void> {
            return localVarFp.teamsControllerLeaveTeam(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for teamsControllerCreateTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiTeamsControllerCreateTeamRequest
 */
export interface TeamsApiTeamsControllerCreateTeamRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamsApiTeamsControllerCreateTeam
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiTeamsControllerCreateTeam
     */
    readonly website: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiTeamsControllerCreateTeam
     */
    readonly serverIp: string

    /**
     * 
     * @type {string}
     * @memberof TeamsApiTeamsControllerCreateTeam
     */
    readonly serverPassword: string

    /**
     * 
     * @type {any}
     * @memberof TeamsApiTeamsControllerCreateTeam
     */
    readonly avatar?: any
}

/**
 * Request parameters for teamsControllerDeleteTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiTeamsControllerDeleteTeamRequest
 */
export interface TeamsApiTeamsControllerDeleteTeamRequest {
    /**
     * 
     * @type {DeleteTeamDto}
     * @memberof TeamsApiTeamsControllerDeleteTeam
     */
    readonly deleteTeamDto: DeleteTeamDto
}

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * 
     * @param {TeamsApiTeamsControllerCreateTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsControllerCreateTeam(requestParameters: TeamsApiTeamsControllerCreateTeamRequest, options?: any) {
        return TeamsApiFp(this.configuration).teamsControllerCreateTeam(requestParameters.name, requestParameters.website, requestParameters.serverIp, requestParameters.serverPassword, requestParameters.avatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TeamsApiTeamsControllerDeleteTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsControllerDeleteTeam(requestParameters: TeamsApiTeamsControllerDeleteTeamRequest, options?: any) {
        return TeamsApiFp(this.configuration).teamsControllerDeleteTeam(requestParameters.deleteTeamDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsControllerGet(options?: any) {
        return TeamsApiFp(this.configuration).teamsControllerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsControllerGetPlayers(options?: any) {
        return TeamsApiFp(this.configuration).teamsControllerGetPlayers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public teamsControllerLeaveTeam(options?: any) {
        return TeamsApiFp(this.configuration).teamsControllerLeaveTeam(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeleteUserDto} deleteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser: async (deleteUserDto: DeleteUserDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUserDto' is not null or undefined
            assertParamExists('usersControllerDeleteUser', 'deleteUserDto', deleteUserDto)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerForgotPassword: async (forgotPasswordDto: ForgotPasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'forgotPasswordDto' is not null or undefined
            assertParamExists('usersControllerForgotPassword', 'forgotPasswordDto', forgotPasswordDto)
            const localVarPath = `/api/users/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(forgotPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userName 
         * @param {string} email 
         * @param {string} password 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegisterUser: async (userName: string, email: string, password: string, avatar?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userName' is not null or undefined
            assertParamExists('usersControllerRegisterUser', 'userName', userName)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('usersControllerRegisterUser', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('usersControllerRegisterUser', 'password', password)
            const localVarPath = `/api/users/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (userName !== undefined) { 
                localVarFormParams.append('userName', userName as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }
    
            if (avatar !== undefined) { 
                localVarFormParams.append('avatar', avatar as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerResetPassword: async (resetPasswordDto: ResetPasswordDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resetPasswordDto' is not null or undefined
            assertParamExists('usersControllerResetPassword', 'resetPasswordDto', resetPasswordDto)
            const localVarPath = `/api/users/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProfileUpdateDto} profileUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser: async (profileUpdateDto: ProfileUpdateDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileUpdateDto' is not null or undefined
            assertParamExists('usersControllerUpdateUser', 'profileUpdateDto', profileUpdateDto)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(profileUpdateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserConfirmEmail: async (token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('usersControllerUserConfirmEmail', 'token', token)
            const localVarPath = `/api/users/confirm/email/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserConfirmEmailUpdate: async (token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('usersControllerUserConfirmEmailUpdate', 'token', token)
            const localVarPath = `/api/users/confirm/update-email/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeleteUserDto} deleteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerDeleteUser(deleteUserDto: DeleteUserDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerDeleteUser(deleteUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerForgotPassword(forgotPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} userName 
         * @param {string} email 
         * @param {string} password 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRegisterUser(userName: string, email: string, password: string, avatar?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRegisterUser(userName, email, password, avatar, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerResetPassword(resetPasswordDto: ResetPasswordDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerResetPassword(resetPasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProfileUpdateDto} profileUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdateUser(profileUpdateDto: ProfileUpdateDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdateUser(profileUpdateDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUserConfirmEmail(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUserConfirmEmail(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUserConfirmEmailUpdate(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUserConfirmEmailUpdate(token, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {DeleteUserDto} deleteUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerDeleteUser(deleteUserDto: DeleteUserDto, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerDeleteUser(deleteUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ForgotPasswordDto} forgotPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerForgotPassword(forgotPasswordDto: ForgotPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerForgotPassword(forgotPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUser(options?: any): AxiosPromise<GetUserResponse> {
            return localVarFp.usersControllerGetUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} userName 
         * @param {string} email 
         * @param {string} password 
         * @param {any} [avatar] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegisterUser(userName: string, email: string, password: string, avatar?: any, options?: any): AxiosPromise<RegisterUserResponse> {
            return localVarFp.usersControllerRegisterUser(userName, email, password, avatar, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResetPasswordDto} resetPasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerResetPassword(resetPasswordDto: ResetPasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerResetPassword(resetPasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProfileUpdateDto} profileUpdateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser(profileUpdateDto: ProfileUpdateDto, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerUpdateUser(profileUpdateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserConfirmEmail(token: string, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerUserConfirmEmail(token, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUserConfirmEmailUpdate(token: string, options?: any): AxiosPromise<void> {
            return localVarFp.usersControllerUserConfirmEmailUpdate(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersControllerDeleteUser operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerDeleteUserRequest
 */
export interface UsersApiUsersControllerDeleteUserRequest {
    /**
     * 
     * @type {DeleteUserDto}
     * @memberof UsersApiUsersControllerDeleteUser
     */
    readonly deleteUserDto: DeleteUserDto
}

/**
 * Request parameters for usersControllerForgotPassword operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerForgotPasswordRequest
 */
export interface UsersApiUsersControllerForgotPasswordRequest {
    /**
     * 
     * @type {ForgotPasswordDto}
     * @memberof UsersApiUsersControllerForgotPassword
     */
    readonly forgotPasswordDto: ForgotPasswordDto
}

/**
 * Request parameters for usersControllerRegisterUser operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerRegisterUserRequest
 */
export interface UsersApiUsersControllerRegisterUserRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersControllerRegisterUser
     */
    readonly userName: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersControllerRegisterUser
     */
    readonly email: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersControllerRegisterUser
     */
    readonly password: string

    /**
     * 
     * @type {any}
     * @memberof UsersApiUsersControllerRegisterUser
     */
    readonly avatar?: any
}

/**
 * Request parameters for usersControllerResetPassword operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerResetPasswordRequest
 */
export interface UsersApiUsersControllerResetPasswordRequest {
    /**
     * 
     * @type {ResetPasswordDto}
     * @memberof UsersApiUsersControllerResetPassword
     */
    readonly resetPasswordDto: ResetPasswordDto
}

/**
 * Request parameters for usersControllerUpdateUser operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerUpdateUserRequest
 */
export interface UsersApiUsersControllerUpdateUserRequest {
    /**
     * 
     * @type {ProfileUpdateDto}
     * @memberof UsersApiUsersControllerUpdateUser
     */
    readonly profileUpdateDto: ProfileUpdateDto
}

/**
 * Request parameters for usersControllerUserConfirmEmail operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerUserConfirmEmailRequest
 */
export interface UsersApiUsersControllerUserConfirmEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersControllerUserConfirmEmail
     */
    readonly token: string
}

/**
 * Request parameters for usersControllerUserConfirmEmailUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerUserConfirmEmailUpdateRequest
 */
export interface UsersApiUsersControllerUserConfirmEmailUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiUsersControllerUserConfirmEmailUpdate
     */
    readonly token: string
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {UsersApiUsersControllerDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerDeleteUser(requestParameters: UsersApiUsersControllerDeleteUserRequest, options?: any) {
        return UsersApiFp(this.configuration).usersControllerDeleteUser(requestParameters.deleteUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersControllerForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerForgotPassword(requestParameters: UsersApiUsersControllerForgotPasswordRequest, options?: any) {
        return UsersApiFp(this.configuration).usersControllerForgotPassword(requestParameters.forgotPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUser(options?: any) {
        return UsersApiFp(this.configuration).usersControllerGetUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersControllerRegisterUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRegisterUser(requestParameters: UsersApiUsersControllerRegisterUserRequest, options?: any) {
        return UsersApiFp(this.configuration).usersControllerRegisterUser(requestParameters.userName, requestParameters.email, requestParameters.password, requestParameters.avatar, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersControllerResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerResetPassword(requestParameters: UsersApiUsersControllerResetPasswordRequest, options?: any) {
        return UsersApiFp(this.configuration).usersControllerResetPassword(requestParameters.resetPasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersControllerUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdateUser(requestParameters: UsersApiUsersControllerUpdateUserRequest, options?: any) {
        return UsersApiFp(this.configuration).usersControllerUpdateUser(requestParameters.profileUpdateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersControllerUserConfirmEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUserConfirmEmail(requestParameters: UsersApiUsersControllerUserConfirmEmailRequest, options?: any) {
        return UsersApiFp(this.configuration).usersControllerUserConfirmEmail(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiUsersControllerUserConfirmEmailUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUserConfirmEmailUpdate(requestParameters: UsersApiUsersControllerUserConfirmEmailUpdateRequest, options?: any) {
        return UsersApiFp(this.configuration).usersControllerUserConfirmEmailUpdate(requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UtilitiesApi - axios parameter creator
 * @export
 */
export const UtilitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} gameMap 
         * @param {string} name 
         * @param {string} side 
         * @param {string} mouseButton 
         * @param {boolean} crouch 
         * @param {string} movement 
         * @param {boolean} jump 
         * @param {string} type 
         * @param {Array<any>} images 
         * @param {string} [description] 
         * @param {string} [videoLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerAddUtility: async (gameMap: string, name: string, side: string, mouseButton: string, crouch: boolean, movement: string, jump: boolean, type: string, images: Array<any>, description?: string, videoLink?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameMap' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'gameMap', gameMap)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'name', name)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'side', side)
            // verify required parameter 'mouseButton' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'mouseButton', mouseButton)
            // verify required parameter 'crouch' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'crouch', crouch)
            // verify required parameter 'movement' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'movement', movement)
            // verify required parameter 'jump' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'jump', jump)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'type', type)
            // verify required parameter 'images' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'images', images)
            const localVarPath = `/api/utilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (gameMap !== undefined) { 
                localVarFormParams.append('gameMap', gameMap as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (videoLink !== undefined) { 
                localVarFormParams.append('videoLink', videoLink as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.append('side', side as any);
            }
    
            if (mouseButton !== undefined) { 
                localVarFormParams.append('mouseButton', mouseButton as any);
            }
    
            if (crouch !== undefined) { 
                localVarFormParams.append('crouch', crouch as any);
            }
    
            if (movement !== undefined) { 
                localVarFormParams.append('movement', movement as any);
            }
    
            if (jump !== undefined) { 
                localVarFormParams.append('jump', jump as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
                if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('images', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUtilityDto} deleteUtilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerDeleteUtility: async (deleteUtilityDto: DeleteUtilityDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUtilityDto' is not null or undefined
            assertParamExists('utilitiesControllerDeleteUtility', 'deleteUtilityDto', deleteUtilityDto)
            const localVarPath = `/api/utilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUtilityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'} gameMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerGetUtility: async (gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameMap' is not null or undefined
            assertParamExists('utilitiesControllerGetUtility', 'gameMap', gameMap)
            const localVarPath = `/api/utilities/{gameMap}`
                .replace(`{${"gameMap"}}`, encodeURIComponent(String(gameMap)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUtilityPositionDto} updateUtilityPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerUpdateUtilityPosition: async (updateUtilityPositionDto: UpdateUtilityPositionDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUtilityPositionDto' is not null or undefined
            assertParamExists('utilitiesControllerUpdateUtilityPosition', 'updateUtilityPositionDto', updateUtilityPositionDto)
            const localVarPath = `/api/utilities/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUtilityPositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilitiesApi - functional programming interface
 * @export
 */
export const UtilitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} gameMap 
         * @param {string} name 
         * @param {string} side 
         * @param {string} mouseButton 
         * @param {boolean} crouch 
         * @param {string} movement 
         * @param {boolean} jump 
         * @param {string} type 
         * @param {Array<any>} images 
         * @param {string} [description] 
         * @param {string} [videoLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerAddUtility(gameMap: string, name: string, side: string, mouseButton: string, crouch: boolean, movement: string, jump: boolean, type: string, images: Array<any>, description?: string, videoLink?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerAddUtility(gameMap, name, side, mouseButton, crouch, movement, jump, type, images, description, videoLink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteUtilityDto} deleteUtilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerDeleteUtility(deleteUtilityDto: DeleteUtilityDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerDeleteUtility(deleteUtilityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'} gameMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerGetUtility(gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUtilityResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerGetUtility(gameMap, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateUtilityPositionDto} updateUtilityPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerUpdateUtilityPosition(updateUtilityPositionDto: UpdateUtilityPositionDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerUpdateUtilityPosition(updateUtilityPositionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilitiesApi - factory interface
 * @export
 */
export const UtilitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilitiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} gameMap 
         * @param {string} name 
         * @param {string} side 
         * @param {string} mouseButton 
         * @param {boolean} crouch 
         * @param {string} movement 
         * @param {boolean} jump 
         * @param {string} type 
         * @param {Array<any>} images 
         * @param {string} [description] 
         * @param {string} [videoLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerAddUtility(gameMap: string, name: string, side: string, mouseButton: string, crouch: boolean, movement: string, jump: boolean, type: string, images: Array<any>, description?: string, videoLink?: string, options?: any): AxiosPromise<void> {
            return localVarFp.utilitiesControllerAddUtility(gameMap, name, side, mouseButton, crouch, movement, jump, type, images, description, videoLink, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUtilityDto} deleteUtilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerDeleteUtility(deleteUtilityDto: DeleteUtilityDto, options?: any): AxiosPromise<void> {
            return localVarFp.utilitiesControllerDeleteUtility(deleteUtilityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'} gameMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerGetUtility(gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN', options?: any): AxiosPromise<Array<GetUtilityResponse>> {
            return localVarFp.utilitiesControllerGetUtility(gameMap, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUtilityPositionDto} updateUtilityPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerUpdateUtilityPosition(updateUtilityPositionDto: UpdateUtilityPositionDto, options?: any): AxiosPromise<void> {
            return localVarFp.utilitiesControllerUpdateUtilityPosition(updateUtilityPositionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for utilitiesControllerAddUtility operation in UtilitiesApi.
 * @export
 * @interface UtilitiesApiUtilitiesControllerAddUtilityRequest
 */
export interface UtilitiesApiUtilitiesControllerAddUtilityRequest {
    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly gameMap: string

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly mouseButton: string

    /**
     * 
     * @type {boolean}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly crouch: boolean

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly movement: string

    /**
     * 
     * @type {boolean}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly jump: boolean

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly type: string

    /**
     * 
     * @type {Array<any>}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly images: Array<any>

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly description?: string

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly videoLink?: string
}

/**
 * Request parameters for utilitiesControllerDeleteUtility operation in UtilitiesApi.
 * @export
 * @interface UtilitiesApiUtilitiesControllerDeleteUtilityRequest
 */
export interface UtilitiesApiUtilitiesControllerDeleteUtilityRequest {
    /**
     * 
     * @type {DeleteUtilityDto}
     * @memberof UtilitiesApiUtilitiesControllerDeleteUtility
     */
    readonly deleteUtilityDto: DeleteUtilityDto
}

/**
 * Request parameters for utilitiesControllerGetUtility operation in UtilitiesApi.
 * @export
 * @interface UtilitiesApiUtilitiesControllerGetUtilityRequest
 */
export interface UtilitiesApiUtilitiesControllerGetUtilityRequest {
    /**
     * 
     * @type {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'}
     * @memberof UtilitiesApiUtilitiesControllerGetUtility
     */
    readonly gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'
}

/**
 * Request parameters for utilitiesControllerUpdateUtilityPosition operation in UtilitiesApi.
 * @export
 * @interface UtilitiesApiUtilitiesControllerUpdateUtilityPositionRequest
 */
export interface UtilitiesApiUtilitiesControllerUpdateUtilityPositionRequest {
    /**
     * 
     * @type {UpdateUtilityPositionDto}
     * @memberof UtilitiesApiUtilitiesControllerUpdateUtilityPosition
     */
    readonly updateUtilityPositionDto: UpdateUtilityPositionDto
}

/**
 * UtilitiesApi - object-oriented interface
 * @export
 * @class UtilitiesApi
 * @extends {BaseAPI}
 */
export class UtilitiesApi extends BaseAPI {
    /**
     * 
     * @param {UtilitiesApiUtilitiesControllerAddUtilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerAddUtility(requestParameters: UtilitiesApiUtilitiesControllerAddUtilityRequest, options?: any) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerAddUtility(requestParameters.gameMap, requestParameters.name, requestParameters.side, requestParameters.mouseButton, requestParameters.crouch, requestParameters.movement, requestParameters.jump, requestParameters.type, requestParameters.images, requestParameters.description, requestParameters.videoLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UtilitiesApiUtilitiesControllerDeleteUtilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerDeleteUtility(requestParameters: UtilitiesApiUtilitiesControllerDeleteUtilityRequest, options?: any) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerDeleteUtility(requestParameters.deleteUtilityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UtilitiesApiUtilitiesControllerGetUtilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerGetUtility(requestParameters: UtilitiesApiUtilitiesControllerGetUtilityRequest, options?: any) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerGetUtility(requestParameters.gameMap, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UtilitiesApiUtilitiesControllerUpdateUtilityPositionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerUpdateUtilityPosition(requestParameters: UtilitiesApiUtilitiesControllerUpdateUtilityPositionRequest, options?: any) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerUpdateUtilityPosition(requestParameters.updateUtilityPositionDto, options).then((request) => request(this.axios, this.basePath));
    }
}



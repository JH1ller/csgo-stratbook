/* tslint:disable */
/* eslint-disable */
/**
 * csgo-stratbook api
 * Stratbook REST API
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeleteUtilityDto } from '../models';
// @ts-ignore
import { GetUtilityResponse } from '../models';
// @ts-ignore
import { UpdateUtilityPositionDto } from '../models';
/**
 * UtilitiesApi - axios parameter creator
 * @export
 */
export const UtilitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} gameMap 
         * @param {string} name 
         * @param {string} side 
         * @param {string} mouseButton 
         * @param {boolean} crouch 
         * @param {string} movement 
         * @param {boolean} jump 
         * @param {string} type 
         * @param {Array<any>} images 
         * @param {string} [description] 
         * @param {string} [videoLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerAddUtility: async (gameMap: string, name: string, side: string, mouseButton: string, crouch: boolean, movement: string, jump: boolean, type: string, images: Array<any>, description?: string, videoLink?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameMap' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'gameMap', gameMap)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'name', name)
            // verify required parameter 'side' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'side', side)
            // verify required parameter 'mouseButton' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'mouseButton', mouseButton)
            // verify required parameter 'crouch' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'crouch', crouch)
            // verify required parameter 'movement' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'movement', movement)
            // verify required parameter 'jump' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'jump', jump)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'type', type)
            // verify required parameter 'images' is not null or undefined
            assertParamExists('utilitiesControllerAddUtility', 'images', images)
            const localVarPath = `/api/utilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (gameMap !== undefined) { 
                localVarFormParams.append('gameMap', gameMap as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (videoLink !== undefined) { 
                localVarFormParams.append('videoLink', videoLink as any);
            }
    
            if (side !== undefined) { 
                localVarFormParams.append('side', side as any);
            }
    
            if (mouseButton !== undefined) { 
                localVarFormParams.append('mouseButton', mouseButton as any);
            }
    
            if (crouch !== undefined) { 
                localVarFormParams.append('crouch', crouch as any);
            }
    
            if (movement !== undefined) { 
                localVarFormParams.append('movement', movement as any);
            }
    
            if (jump !== undefined) { 
                localVarFormParams.append('jump', jump as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
                if (images) {
                images.forEach((element) => {
                    localVarFormParams.append('images', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteUtilityDto} deleteUtilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerDeleteUtility: async (deleteUtilityDto: DeleteUtilityDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUtilityDto' is not null or undefined
            assertParamExists('utilitiesControllerDeleteUtility', 'deleteUtilityDto', deleteUtilityDto)
            const localVarPath = `/api/utilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUtilityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'} gameMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerGetUtility: async (gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameMap' is not null or undefined
            assertParamExists('utilitiesControllerGetUtility', 'gameMap', gameMap)
            const localVarPath = `/api/utilities/{gameMap}`
                .replace(`{${"gameMap"}}`, encodeURIComponent(String(gameMap)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerUpdateUtility: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/utilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateUtilityPositionDto} updateUtilityPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerUpdateUtilityPosition: async (updateUtilityPositionDto: UpdateUtilityPositionDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUtilityPositionDto' is not null or undefined
            assertParamExists('utilitiesControllerUpdateUtilityPosition', 'updateUtilityPositionDto', updateUtilityPositionDto)
            const localVarPath = `/api/utilities/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUtilityPositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilitiesApi - functional programming interface
 * @export
 */
export const UtilitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UtilitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} gameMap 
         * @param {string} name 
         * @param {string} side 
         * @param {string} mouseButton 
         * @param {boolean} crouch 
         * @param {string} movement 
         * @param {boolean} jump 
         * @param {string} type 
         * @param {Array<any>} images 
         * @param {string} [description] 
         * @param {string} [videoLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerAddUtility(gameMap: string, name: string, side: string, mouseButton: string, crouch: boolean, movement: string, jump: boolean, type: string, images: Array<any>, description?: string, videoLink?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerAddUtility(gameMap, name, side, mouseButton, crouch, movement, jump, type, images, description, videoLink, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {DeleteUtilityDto} deleteUtilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerDeleteUtility(deleteUtilityDto: DeleteUtilityDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerDeleteUtility(deleteUtilityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'} gameMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerGetUtility(gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUtilityResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerGetUtility(gameMap, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerUpdateUtility(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerUpdateUtility(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateUtilityPositionDto} updateUtilityPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async utilitiesControllerUpdateUtilityPosition(updateUtilityPositionDto: UpdateUtilityPositionDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.utilitiesControllerUpdateUtilityPosition(updateUtilityPositionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UtilitiesApi - factory interface
 * @export
 */
export const UtilitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UtilitiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} gameMap 
         * @param {string} name 
         * @param {string} side 
         * @param {string} mouseButton 
         * @param {boolean} crouch 
         * @param {string} movement 
         * @param {boolean} jump 
         * @param {string} type 
         * @param {Array<any>} images 
         * @param {string} [description] 
         * @param {string} [videoLink] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerAddUtility(gameMap: string, name: string, side: string, mouseButton: string, crouch: boolean, movement: string, jump: boolean, type: string, images: Array<any>, description?: string, videoLink?: string, options?: any): AxiosPromise<void> {
            return localVarFp.utilitiesControllerAddUtility(gameMap, name, side, mouseButton, crouch, movement, jump, type, images, description, videoLink, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DeleteUtilityDto} deleteUtilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerDeleteUtility(deleteUtilityDto: DeleteUtilityDto, options?: any): AxiosPromise<void> {
            return localVarFp.utilitiesControllerDeleteUtility(deleteUtilityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'} gameMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerGetUtility(gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN', options?: any): AxiosPromise<Array<GetUtilityResponse>> {
            return localVarFp.utilitiesControllerGetUtility(gameMap, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerUpdateUtility(options?: any): AxiosPromise<void> {
            return localVarFp.utilitiesControllerUpdateUtility(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateUtilityPositionDto} updateUtilityPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        utilitiesControllerUpdateUtilityPosition(updateUtilityPositionDto: UpdateUtilityPositionDto, options?: any): AxiosPromise<void> {
            return localVarFp.utilitiesControllerUpdateUtilityPosition(updateUtilityPositionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for utilitiesControllerAddUtility operation in UtilitiesApi.
 * @export
 * @interface UtilitiesApiUtilitiesControllerAddUtilityRequest
 */
export interface UtilitiesApiUtilitiesControllerAddUtilityRequest {
    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly gameMap: string

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly side: string

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly mouseButton: string

    /**
     * 
     * @type {boolean}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly crouch: boolean

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly movement: string

    /**
     * 
     * @type {boolean}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly jump: boolean

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly type: string

    /**
     * 
     * @type {Array<any>}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly images: Array<any>

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly description?: string

    /**
     * 
     * @type {string}
     * @memberof UtilitiesApiUtilitiesControllerAddUtility
     */
    readonly videoLink?: string
}

/**
 * Request parameters for utilitiesControllerDeleteUtility operation in UtilitiesApi.
 * @export
 * @interface UtilitiesApiUtilitiesControllerDeleteUtilityRequest
 */
export interface UtilitiesApiUtilitiesControllerDeleteUtilityRequest {
    /**
     * 
     * @type {DeleteUtilityDto}
     * @memberof UtilitiesApiUtilitiesControllerDeleteUtility
     */
    readonly deleteUtilityDto: DeleteUtilityDto
}

/**
 * Request parameters for utilitiesControllerGetUtility operation in UtilitiesApi.
 * @export
 * @interface UtilitiesApiUtilitiesControllerGetUtilityRequest
 */
export interface UtilitiesApiUtilitiesControllerGetUtilityRequest {
    /**
     * 
     * @type {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'}
     * @memberof UtilitiesApiUtilitiesControllerGetUtility
     */
    readonly gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'
}

/**
 * Request parameters for utilitiesControllerUpdateUtilityPosition operation in UtilitiesApi.
 * @export
 * @interface UtilitiesApiUtilitiesControllerUpdateUtilityPositionRequest
 */
export interface UtilitiesApiUtilitiesControllerUpdateUtilityPositionRequest {
    /**
     * 
     * @type {UpdateUtilityPositionDto}
     * @memberof UtilitiesApiUtilitiesControllerUpdateUtilityPosition
     */
    readonly updateUtilityPositionDto: UpdateUtilityPositionDto
}

/**
 * UtilitiesApi - object-oriented interface
 * @export
 * @class UtilitiesApi
 * @extends {BaseAPI}
 */
export class UtilitiesApi extends BaseAPI {
    /**
     * 
     * @param {UtilitiesApiUtilitiesControllerAddUtilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerAddUtility(requestParameters: UtilitiesApiUtilitiesControllerAddUtilityRequest, options?: any) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerAddUtility(requestParameters.gameMap, requestParameters.name, requestParameters.side, requestParameters.mouseButton, requestParameters.crouch, requestParameters.movement, requestParameters.jump, requestParameters.type, requestParameters.images, requestParameters.description, requestParameters.videoLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UtilitiesApiUtilitiesControllerDeleteUtilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerDeleteUtility(requestParameters: UtilitiesApiUtilitiesControllerDeleteUtilityRequest, options?: any) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerDeleteUtility(requestParameters.deleteUtilityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UtilitiesApiUtilitiesControllerGetUtilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerGetUtility(requestParameters: UtilitiesApiUtilitiesControllerGetUtilityRequest, options?: any) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerGetUtility(requestParameters.gameMap, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerUpdateUtility(options?: any) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerUpdateUtility(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UtilitiesApiUtilitiesControllerUpdateUtilityPositionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilitiesApi
     */
    public utilitiesControllerUpdateUtilityPosition(requestParameters: UtilitiesApiUtilitiesControllerUpdateUtilityPositionRequest, options?: any) {
        return UtilitiesApiFp(this.configuration).utilitiesControllerUpdateUtilityPosition(requestParameters.updateUtilityPositionDto, options).then((request) => request(this.axios, this.basePath));
    }
}

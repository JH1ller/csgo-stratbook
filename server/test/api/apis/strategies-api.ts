/* tslint:disable */
/* eslint-disable */
/**
 * csgo-stratbook api
 * Stratbook REST API
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddStrategyDto } from '../models';
// @ts-ignore
import { StrategyItemResponse } from '../models';
// @ts-ignore
import { UpdateStrategyDto } from '../models';
// @ts-ignore
import { UpdateStrategyPositionDto } from '../models';
/**
 * StrategiesApi - axios parameter creator
 * @export
 */
export const StrategiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id Strategy id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerAddSharedStrategy: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('strategiesControllerAddSharedStrategy', 'id', id)
            const localVarPath = `/api/strategies/share/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddStrategyDto} addStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerAddStrategy: async (addStrategyDto: AddStrategyDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'addStrategyDto' is not null or undefined
            assertParamExists('strategiesControllerAddStrategy', 'addStrategyDto', addStrategyDto)
            const localVarPath = `/api/strategies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addStrategyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Strategy id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerDeleteStrategy: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('strategiesControllerDeleteStrategy', 'id', id)
            const localVarPath = `/api/strategies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'} gameMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerGetStrategy: async (gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameMap' is not null or undefined
            assertParamExists('strategiesControllerGetStrategy', 'gameMap', gameMap)
            const localVarPath = `/api/strategies/{gameMap}`
                .replace(`{${"gameMap"}}`, encodeURIComponent(String(gameMap)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateStrategyDto} updateStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerUpdateStrategy: async (updateStrategyDto: UpdateStrategyDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateStrategyDto' is not null or undefined
            assertParamExists('strategiesControllerUpdateStrategy', 'updateStrategyDto', updateStrategyDto)
            const localVarPath = `/api/strategies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStrategyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateStrategyPositionDto} updateStrategyPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerUpdateUtilityPosition: async (updateStrategyPositionDto: UpdateStrategyPositionDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateStrategyPositionDto' is not null or undefined
            assertParamExists('strategiesControllerUpdateUtilityPosition', 'updateStrategyPositionDto', updateStrategyPositionDto)
            const localVarPath = `/api/strategies/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStrategyPositionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StrategiesApi - functional programming interface
 * @export
 */
export const StrategiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StrategiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id Strategy id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerAddSharedStrategy(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerAddSharedStrategy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AddStrategyDto} addStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerAddStrategy(addStrategyDto: AddStrategyDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StrategyItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerAddStrategy(addStrategyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id Strategy id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerDeleteStrategy(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerDeleteStrategy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'} gameMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerGetStrategy(gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StrategyItemResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerGetStrategy(gameMap, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateStrategyDto} updateStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerUpdateStrategy(updateStrategyDto: UpdateStrategyDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerUpdateStrategy(updateStrategyDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UpdateStrategyPositionDto} updateStrategyPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async strategiesControllerUpdateUtilityPosition(updateStrategyPositionDto: UpdateStrategyPositionDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.strategiesControllerUpdateUtilityPosition(updateStrategyPositionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StrategiesApi - factory interface
 * @export
 */
export const StrategiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StrategiesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id Strategy id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerAddSharedStrategy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.strategiesControllerAddSharedStrategy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddStrategyDto} addStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerAddStrategy(addStrategyDto: AddStrategyDto, options?: any): AxiosPromise<StrategyItemResponse> {
            return localVarFp.strategiesControllerAddStrategy(addStrategyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id Strategy id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerDeleteStrategy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.strategiesControllerDeleteStrategy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'} gameMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerGetStrategy(gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN', options?: any): AxiosPromise<Array<StrategyItemResponse>> {
            return localVarFp.strategiesControllerGetStrategy(gameMap, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateStrategyDto} updateStrategyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerUpdateStrategy(updateStrategyDto: UpdateStrategyDto, options?: any): AxiosPromise<void> {
            return localVarFp.strategiesControllerUpdateStrategy(updateStrategyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateStrategyPositionDto} updateStrategyPositionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        strategiesControllerUpdateUtilityPosition(updateStrategyPositionDto: UpdateStrategyPositionDto, options?: any): AxiosPromise<void> {
            return localVarFp.strategiesControllerUpdateUtilityPosition(updateStrategyPositionDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for strategiesControllerAddSharedStrategy operation in StrategiesApi.
 * @export
 * @interface StrategiesApiStrategiesControllerAddSharedStrategyRequest
 */
export interface StrategiesApiStrategiesControllerAddSharedStrategyRequest {
    /**
     * Strategy id
     * @type {string}
     * @memberof StrategiesApiStrategiesControllerAddSharedStrategy
     */
    readonly id: string
}

/**
 * Request parameters for strategiesControllerAddStrategy operation in StrategiesApi.
 * @export
 * @interface StrategiesApiStrategiesControllerAddStrategyRequest
 */
export interface StrategiesApiStrategiesControllerAddStrategyRequest {
    /**
     * 
     * @type {AddStrategyDto}
     * @memberof StrategiesApiStrategiesControllerAddStrategy
     */
    readonly addStrategyDto: AddStrategyDto
}

/**
 * Request parameters for strategiesControllerDeleteStrategy operation in StrategiesApi.
 * @export
 * @interface StrategiesApiStrategiesControllerDeleteStrategyRequest
 */
export interface StrategiesApiStrategiesControllerDeleteStrategyRequest {
    /**
     * Strategy id
     * @type {string}
     * @memberof StrategiesApiStrategiesControllerDeleteStrategy
     */
    readonly id: string
}

/**
 * Request parameters for strategiesControllerGetStrategy operation in StrategiesApi.
 * @export
 * @interface StrategiesApiStrategiesControllerGetStrategyRequest
 */
export interface StrategiesApiStrategiesControllerGetStrategyRequest {
    /**
     * 
     * @type {'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'}
     * @memberof StrategiesApiStrategiesControllerGetStrategy
     */
    readonly gameMap: 'DUST_2' | 'MIRAGE' | 'OVERPASS' | 'NUKE' | 'VERTIGO' | 'INFERNO' | 'TRAIN'
}

/**
 * Request parameters for strategiesControllerUpdateStrategy operation in StrategiesApi.
 * @export
 * @interface StrategiesApiStrategiesControllerUpdateStrategyRequest
 */
export interface StrategiesApiStrategiesControllerUpdateStrategyRequest {
    /**
     * 
     * @type {UpdateStrategyDto}
     * @memberof StrategiesApiStrategiesControllerUpdateStrategy
     */
    readonly updateStrategyDto: UpdateStrategyDto
}

/**
 * Request parameters for strategiesControllerUpdateUtilityPosition operation in StrategiesApi.
 * @export
 * @interface StrategiesApiStrategiesControllerUpdateUtilityPositionRequest
 */
export interface StrategiesApiStrategiesControllerUpdateUtilityPositionRequest {
    /**
     * 
     * @type {UpdateStrategyPositionDto}
     * @memberof StrategiesApiStrategiesControllerUpdateUtilityPosition
     */
    readonly updateStrategyPositionDto: UpdateStrategyPositionDto
}

/**
 * StrategiesApi - object-oriented interface
 * @export
 * @class StrategiesApi
 * @extends {BaseAPI}
 */
export class StrategiesApi extends BaseAPI {
    /**
     * 
     * @param {StrategiesApiStrategiesControllerAddSharedStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerAddSharedStrategy(requestParameters: StrategiesApiStrategiesControllerAddSharedStrategyRequest, options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerAddSharedStrategy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategiesApiStrategiesControllerAddStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerAddStrategy(requestParameters: StrategiesApiStrategiesControllerAddStrategyRequest, options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerAddStrategy(requestParameters.addStrategyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategiesApiStrategiesControllerDeleteStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerDeleteStrategy(requestParameters: StrategiesApiStrategiesControllerDeleteStrategyRequest, options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerDeleteStrategy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategiesApiStrategiesControllerGetStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerGetStrategy(requestParameters: StrategiesApiStrategiesControllerGetStrategyRequest, options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerGetStrategy(requestParameters.gameMap, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategiesApiStrategiesControllerUpdateStrategyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerUpdateStrategy(requestParameters: StrategiesApiStrategiesControllerUpdateStrategyRequest, options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerUpdateStrategy(requestParameters.updateStrategyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StrategiesApiStrategiesControllerUpdateUtilityPositionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategiesApi
     */
    public strategiesControllerUpdateUtilityPosition(requestParameters: StrategiesApiStrategiesControllerUpdateUtilityPositionRequest, options?: any) {
        return StrategiesApiFp(this.configuration).strategiesControllerUpdateUtilityPosition(requestParameters.updateStrategyPositionDto, options).then((request) => request(this.axios, this.basePath));
    }
}
